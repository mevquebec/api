<?php
/**
 * RapportApi
 * PHP version 5
 *
 * @category Class
 * @package  Mev\Gateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Module d'enregistrement des ventes (MEV) API
 *
 * Permet la communication bidirectionnelle avec le module d'enregistrement des ventes (MEV) de Revenu Québec et votre système d'enregistrement des ventes (SEV) ou toutes autres logiciel de caisse.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@mev.quebec
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mev\Gateway\MevGateway;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Mev\Gateway\ApiException;
use Mev\Gateway\Configuration;
use Mev\Gateway\HeaderSelector;
use Mev\Gateway\ObjectSerializer;

/**
 * RapportApi Class Doc Comment
 *
 * @category Class
 * @package  Mev\Gateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RapportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation analyseTransactionnelle
     *
     * Analyse transactionnelle (par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function analyseTransactionnelle($debut, $fin = null)
    {
        list($response) = $this->analyseTransactionnelleWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation analyseTransactionnelleWithHttpInfo
     *
     * Analyse transactionnelle (par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function analyseTransactionnelleWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->analyseTransactionnelleRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation analyseTransactionnelleAsync
     *
     * Analyse transactionnelle (par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyseTransactionnelleAsync($debut, $fin = null)
    {
        return $this->analyseTransactionnelleAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation analyseTransactionnelleAsyncWithHttpInfo
     *
     * Analyse transactionnelle (par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyseTransactionnelleAsyncWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->analyseTransactionnelleRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'analyseTransactionnelle'
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function analyseTransactionnelleRequest($debut, $fin = null)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling analyseTransactionnelle'
            );
        }

        $resourcePath = '/rapport/AnalyseTransactionnelle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation analyseTransactionnelleTransaction
     *
     * Analyse transactionnelle (par numéro de transaction))
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function analyseTransactionnelleTransaction($debut, $fin)
    {
        list($response) = $this->analyseTransactionnelleTransactionWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation analyseTransactionnelleTransactionWithHttpInfo
     *
     * Analyse transactionnelle (par numéro de transaction))
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function analyseTransactionnelleTransactionWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->analyseTransactionnelleTransactionRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation analyseTransactionnelleTransactionAsync
     *
     * Analyse transactionnelle (par numéro de transaction))
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyseTransactionnelleTransactionAsync($debut, $fin)
    {
        return $this->analyseTransactionnelleTransactionAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation analyseTransactionnelleTransactionAsyncWithHttpInfo
     *
     * Analyse transactionnelle (par numéro de transaction))
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function analyseTransactionnelleTransactionAsyncWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->analyseTransactionnelleTransactionRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'analyseTransactionnelleTransaction'
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function analyseTransactionnelleTransactionRequest($debut, $fin)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling analyseTransactionnelleTransaction'
            );
        }
        // verify the required parameter 'fin' is set
        if ($fin === null || (is_array($fin) && count($fin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fin when calling analyseTransactionnelleTransaction'
            );
        }

        $resourcePath = '/rapport/AnalyseTransactionnelleTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detailDesVentesNonPrescrit
     *
     * Détail des ventes (non prescrit, par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (optional)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function detailDesVentesNonPrescrit($debut = null, $fin = null)
    {
        list($response) = $this->detailDesVentesNonPrescritWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation detailDesVentesNonPrescritWithHttpInfo
     *
     * Détail des ventes (non prescrit, par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (optional)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function detailDesVentesNonPrescritWithHttpInfo($debut = null, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailDesVentesNonPrescritRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detailDesVentesNonPrescritAsync
     *
     * Détail des ventes (non prescrit, par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (optional)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailDesVentesNonPrescritAsync($debut = null, $fin = null)
    {
        return $this->detailDesVentesNonPrescritAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detailDesVentesNonPrescritAsyncWithHttpInfo
     *
     * Détail des ventes (non prescrit, par période)
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (optional)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailDesVentesNonPrescritAsyncWithHttpInfo($debut = null, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailDesVentesNonPrescritRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detailDesVentesNonPrescrit'
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (optional)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function detailDesVentesNonPrescritRequest($debut = null, $fin = null)
    {

        $resourcePath = '/rapport/DetailDesVentesNonPrescrit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detailDesVentesPrescritPartiel
     *
     * Détail des ventes (prescrit partiel, par numéro de transaction)
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function detailDesVentesPrescritPartiel($debut, $fin)
    {
        list($response) = $this->detailDesVentesPrescritPartielWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation detailDesVentesPrescritPartielWithHttpInfo
     *
     * Détail des ventes (prescrit partiel, par numéro de transaction)
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function detailDesVentesPrescritPartielWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailDesVentesPrescritPartielRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detailDesVentesPrescritPartielAsync
     *
     * Détail des ventes (prescrit partiel, par numéro de transaction)
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailDesVentesPrescritPartielAsync($debut, $fin)
    {
        return $this->detailDesVentesPrescritPartielAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detailDesVentesPrescritPartielAsyncWithHttpInfo
     *
     * Détail des ventes (prescrit partiel, par numéro de transaction)
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailDesVentesPrescritPartielAsyncWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailDesVentesPrescritPartielRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detailDesVentesPrescritPartiel'
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function detailDesVentesPrescritPartielRequest($debut, $fin)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling detailDesVentesPrescritPartiel'
            );
        }
        // verify the required parameter 'fin' is set
        if ($fin === null || (is_array($fin) && count($fin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fin when calling detailDesVentesPrescritPartiel'
            );
        }

        $resourcePath = '/rapport/DetailDesVentesPrescritPartiel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detailJournalEvenements
     *
     * Détail du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function detailJournalEvenements($debut, $fin = null)
    {
        list($response) = $this->detailJournalEvenementsWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation detailJournalEvenementsWithHttpInfo
     *
     * Détail du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function detailJournalEvenementsWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailJournalEvenementsRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detailJournalEvenementsAsync
     *
     * Détail du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailJournalEvenementsAsync($debut, $fin = null)
    {
        return $this->detailJournalEvenementsAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detailJournalEvenementsAsyncWithHttpInfo
     *
     * Détail du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detailJournalEvenementsAsyncWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->detailJournalEvenementsRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detailJournalEvenements'
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function detailJournalEvenementsRequest($debut, $fin = null)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling detailJournalEvenements'
            );
        }

        $resourcePath = '/rapport/DetailJournalEvenements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation infosGenerales
     *
     * Informations générales
     *
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function infosGenerales()
    {
        list($response) = $this->infosGeneralesWithHttpInfo();
        return $response;
    }

    /**
     * Operation infosGeneralesWithHttpInfo
     *
     * Informations générales
     *
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function infosGeneralesWithHttpInfo()
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->infosGeneralesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation infosGeneralesAsync
     *
     * Informations générales
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function infosGeneralesAsync()
    {
        return $this->infosGeneralesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation infosGeneralesAsyncWithHttpInfo
     *
     * Informations générales
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function infosGeneralesAsyncWithHttpInfo()
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->infosGeneralesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'infosGenerales'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function infosGeneralesRequest()
    {

        $resourcePath = '/rapport/InfosGenerales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sommaireDesVentes
     *
     * Rapport Sommaire des ventes par période
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function sommaireDesVentes($debut, $fin)
    {
        list($response) = $this->sommaireDesVentesWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation sommaireDesVentesWithHttpInfo
     *
     * Rapport Sommaire des ventes par période
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function sommaireDesVentesWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireDesVentesRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sommaireDesVentesAsync
     *
     * Rapport Sommaire des ventes par période
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireDesVentesAsync($debut, $fin)
    {
        return $this->sommaireDesVentesAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sommaireDesVentesAsyncWithHttpInfo
     *
     * Rapport Sommaire des ventes par période
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireDesVentesAsyncWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireDesVentesRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sommaireDesVentes'
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sommaireDesVentesRequest($debut, $fin)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling sommaireDesVentes'
            );
        }
        // verify the required parameter 'fin' is set
        if ($fin === null || (is_array($fin) && count($fin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fin when calling sommaireDesVentes'
            );
        }

        $resourcePath = '/rapport/SommaireDesVentes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sommaireDesVentesTransaction
     *
     * Rapport Sommaire des ventes par numéro de transaction
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function sommaireDesVentesTransaction($debut, $fin)
    {
        list($response) = $this->sommaireDesVentesTransactionWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation sommaireDesVentesTransactionWithHttpInfo
     *
     * Rapport Sommaire des ventes par numéro de transaction
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function sommaireDesVentesTransactionWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireDesVentesTransactionRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sommaireDesVentesTransactionAsync
     *
     * Rapport Sommaire des ventes par numéro de transaction
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireDesVentesTransactionAsync($debut, $fin)
    {
        return $this->sommaireDesVentesTransactionAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sommaireDesVentesTransactionAsyncWithHttpInfo
     *
     * Rapport Sommaire des ventes par numéro de transaction
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireDesVentesTransactionAsyncWithHttpInfo($debut, $fin)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireDesVentesTransactionRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sommaireDesVentesTransaction'
     *
     * @param  string $debut Transaction debut (required)
     * @param  string $fin Transaction fin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sommaireDesVentesTransactionRequest($debut, $fin)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling sommaireDesVentesTransaction'
            );
        }
        // verify the required parameter 'fin' is set
        if ($fin === null || (is_array($fin) && count($fin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fin when calling sommaireDesVentesTransaction'
            );
        }

        $resourcePath = '/rapport/SommaireDesVentesTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sommaireJournalEvenements
     *
     * Sommaire du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function sommaireJournalEvenements($debut, $fin = null)
    {
        list($response) = $this->sommaireJournalEvenementsWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation sommaireJournalEvenementsWithHttpInfo
     *
     * Sommaire du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function sommaireJournalEvenementsWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireJournalEvenementsRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sommaireJournalEvenementsAsync
     *
     * Sommaire du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireJournalEvenementsAsync($debut, $fin = null)
    {
        return $this->sommaireJournalEvenementsAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sommaireJournalEvenementsAsyncWithHttpInfo
     *
     * Sommaire du journal des évènements
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommaireJournalEvenementsAsyncWithHttpInfo($debut, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommaireJournalEvenementsRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sommaireJournalEvenements'
     *
     * @param  string $debut Date debut (AAAMMJJhhmm) (required)
     * @param  string $fin Date fin (AAAMMJJhhmm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sommaireJournalEvenementsRequest($debut, $fin = null)
    {
        // verify the required parameter 'debut' is set
        if ($debut === null || (is_array($debut) && count($debut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debut when calling sommaireJournalEvenements'
            );
        }

        $resourcePath = '/rapport/SommaireJournalEvenements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sommairePeriodiqueDesVentes
     *
     * Rapport Sommaire périodique des ventes
     *
     * @param  string $debut Date debut (AAAMM) (optional)
     * @param  string $fin Date fin (AAAMM) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mev\Gateway\Model\InlineResponse202
     */
    public function sommairePeriodiqueDesVentes($debut = null, $fin = null)
    {
        list($response) = $this->sommairePeriodiqueDesVentesWithHttpInfo($debut, $fin);
        return $response;
    }

    /**
     * Operation sommairePeriodiqueDesVentesWithHttpInfo
     *
     * Rapport Sommaire périodique des ventes
     *
     * @param  string $debut Date debut (AAAMM) (optional)
     * @param  string $fin Date fin (AAAMM) (optional)
     *
     * @throws \Mev\Gateway\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mev\Gateway\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function sommairePeriodiqueDesVentesWithHttpInfo($debut = null, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommairePeriodiqueDesVentesRequest($debut, $fin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mev\Gateway\Model\InlineResponse400[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sommairePeriodiqueDesVentesAsync
     *
     * Rapport Sommaire périodique des ventes
     *
     * @param  string $debut Date debut (AAAMM) (optional)
     * @param  string $fin Date fin (AAAMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommairePeriodiqueDesVentesAsync($debut = null, $fin = null)
    {
        return $this->sommairePeriodiqueDesVentesAsyncWithHttpInfo($debut, $fin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sommairePeriodiqueDesVentesAsyncWithHttpInfo
     *
     * Rapport Sommaire périodique des ventes
     *
     * @param  string $debut Date debut (AAAMM) (optional)
     * @param  string $fin Date fin (AAAMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sommairePeriodiqueDesVentesAsyncWithHttpInfo($debut = null, $fin = null)
    {
        $returnType = '\Mev\Gateway\Model\InlineResponse202';
        $request = $this->sommairePeriodiqueDesVentesRequest($debut, $fin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sommairePeriodiqueDesVentes'
     *
     * @param  string $debut Date debut (AAAMM) (optional)
     * @param  string $fin Date fin (AAAMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sommairePeriodiqueDesVentesRequest($debut = null, $fin = null)
    {

        $resourcePath = '/rapport/SommairePeriodiqueDesVentes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($debut !== null) {
            $queryParams['debut'] = ObjectSerializer::toQueryValue($debut, null);
        }
        // query params
        if ($fin !== null) {
            $queryParams['fin'] = ObjectSerializer::toQueryValue($fin, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MEV-ID');
        if ($apiKey !== null) {
            $headers['X-MEV-ID'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
